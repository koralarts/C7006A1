hh='*'
mm='*'
dd='*'
mo='*'
da='*'
em='khcastillo@hotmail.com'
at=''
sb='"No Subject"'
msg=''

while true
do
	clear	
	echo $msg
	cat << 'MENU'
		T....................Specify Time
		M....................Specify Minute
		H....................Specify Hour
		D....................Specify Date
		L....................Specify Day (Day)
		O....................Specify Month
		Y....................Specify Day (Mon-Sun)
		E....................Specify E-mail
		A....................Specify Attachment
		U....................Specify Subject
		C....................Current Entry
		R....................Reset Entry
		S....................Save entry to cron
		Q....................Quit
MENU
	echo -n 'Enter your choice $ '
	read cmd rest

	case ${cmd} in
		[Tt]) echo -n 'Please enter a time (HH[0-23]:MM[0-59]) $ '

			read time rest
			
			if [[ "$time" =~ ^(0?[0-9]|1[0-9]|2[0-3]):(0?[0-9]|[1-5][0-9])$ ]]
			then
				hh=`echo $time | cut -d':' -f1`
				mm=`echo $time | cut -d':' -f2`
				msg='Success: Time Saved'
			else
				msg="Error: Invalid Time Format $time"
			fi
			;;
		[Mm]) echo -n 'Please enter minute (*/# or [0-59]) $ '
			
			read minute rest

			if [[ "$minute" =~ ^((\*/)?(0?[0-9]|[1-5][0-9]))$ ]]
			then
				mm=`echo $minute`
				msg='Success: Minute Saved'
			else
				msg="Error: Invalid Minute Format $minute"
			fi
			;;
		[Hh]) echo -n 'Please enter hour (*/# or [0-23]) $ '

			read hour rest

			if [[ "$hour" =~ ^((\*/)?(0?[0-9]|1[0-9]|2[0-3])) ]]
			then
				hh=`echo $hour`
				msg='Success: Hour Saved'
			else
				msg="Error: Invalid Minute Format $hour"
			fi
			;;
		[Dd]) echo -n 'Please enter a date (DD[1-31]-MM[1-12]) $ '

			read date rest

			if [[ "$date" =~ ^([1-9]|1[0-9]|2[0-9]|3[0-1])-([0-9]|1[0-2])$ ]]
			then
				dd=`echo $date | cut -d'-' -f1`
				mo=`echo $date | cut -d'-' -f2`
				msg='Success: Date Saved'
			else
				msg="Error: Invalid Date Format $date"
			fi
			;;
		[Ll]) echo -n 'Please enter the date (*/# or [1-31]) $ '

			read day rest

			if [[ "$day" =~ ^((\*/)?([1-9]|1[0-9]|2[0-9]|3[0-1]))$ ]]
			then
				dd=`echo $date`
				msg='Success: Day Saved'
			else
				msg="Error: Invalid Date Format $day"
			fi
			;;
		[Oo]) echo -n 'Please enter the month (*/# or [1-12]) $ '

			read month rest

			if [[ "$month" =~ ^((\*/)?([0-9]|1[0-2]))$ ]]
			then
				mo=`echo $month`
				msg='Sucess: Month Saved'
			else
				msg="Error: Invalid Month Format $month"
			fi
			;;
		[Yy]) echo -n 'Please enter a day (0-6) (Sunday = 0) $ '

			read day rest

			if [[ "$day" =~ [0-6]{1} ]]
			then
				da=$day
				msg='Success: Day Saved'
			else
				msg="Error: Invalid Day $day"
			fi
			;;
		[Ee]) echo -n 'Please enter the receiving e-mail $ '

			read email rest

			if [[ "$email" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$ ]]
			then
				em=$email
				msg='Success: E-mail Saved'
			else
				msg="Error: Invalid E-mail Format $email"
			fi
			;;
		[Aa]) echo -n 'Please enter the path and filename of the attachment $ '

			read attach rest

			if [ -x "$attach" -o -f "$attach" ]
			then
				at=`echo -a \"$attach\"`
				msg='Success: Attachment Saved'
			else
				msg="Error: File doesn't exist $attach"
			fi
			;;
		[Uu]) echo -n 'Please enter the subject of the e-mail $ '

			read subj rest

			sb=`echo \"$subj\"`
			;;
		[Cc]) msg="Entry: $mm $hh $dd $mo $da /bin/mail -s "$sb" "$at" $em" ;;
		[Rr])
			hh='*'
			mm='*'
			dd='*'
			mo='*'
			da='*'
			em=''
			at=''
			sb='No Subject'
			msg='Success: Entry reset'
			;;
		[Ss]) (crontab -l; echo "$mm $hh $dd $mo $da /bin/mailx -s $sb $at $em 2>&1 >> /mail_log.log") | crontab -
			msg='Saved Successfully'
			;; 
		[Qq]) return ;;
		*) msg="Invalid Command" ;;
	esac
done